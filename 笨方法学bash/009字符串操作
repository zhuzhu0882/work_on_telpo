字符串操作
#字符串长度
$(#string)
expr length $string

while read line
do
    echo "$line"
    len=$(#line)
done
#索引
expr index "$string" '$characters'

str=abc123
echo `expr index "$str" 'abc'`
#提取子串
提取指定位置和长度字符
expr substr $string $position $length. 起始位置1

提取符合条件字符
从头开始提取
expr match "$string" '\(REGEXP\)'
str=abcABC123
expr match "$str" '\(REGEX.[b-c]*[A-Z]..[0-9]\)' #abcABC1
#子串删除
#从头开始删除
$(string#substring). 最短匹配
$(string##substring). 最长匹配

str=abcABC123ABCabc.   
$(str#a*C)    #123ABCabc
$(str##a*C)   #abc


从末尾开始删除
$(string%substring). 最短匹配
$(string%%substring). 最长匹配
#子串替换
#awk处理字符串.  awk是一种编程语言，对文本和数据进行处理
#字符串函数
sub()
gsub()
index(string,substring)
length(string)
substr()
match()
toupper()
split()

#变量的处理和扩展
${parameter}
${parameter-default} #如果没有声明，使用默认值。不会修改变量的值
${parameter=default}。#修改变量的值

${parameter+alt_default}。 定义就赋值
${parameter?err_msg}.  如果没有定义，报错

长度/子串删除
$(#var)
计算字符串、位置参数和数组的长度

${#array}.  表示第一个元素的长度
${#array[*]}和${#array[@]}。  表示数组中元素的个数

${var#pattern}.  ${var##pattern}.  从变量$var的开头，删除最短或最长匹配$pattern的子串

${var:pos:len}. 变量var从位置pos开始，提取len长度