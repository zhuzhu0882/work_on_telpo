#vim 下
:!echo $PATH

#-e exist
if [ -e "filename" ];then
    echo "file $filename exists"



# ;;双分号 ，是case代码的结束符

variable='abc'
case "$variable" in
abc)
    echo "\$variable = abc";;
xyz)
    echo "\$variable = axyz";;
esac

#引号 双引号：会发生变量替换 单引号：不会发生变量替换
#echo $PWD
/root

#echo "$PWD"
/root
#echo '$PWD'
$PWD

echo $HELLO. -> echo ${HELLO}

#逗号操作符
#用于连接多个算术操作，并返回最后一项
let "t1 = ((a = 9,15 / 3))"
echo "t1 = $t1".  ->t1=5

#斜线 \反斜线  /正斜线
#转义符
\$  \"  \'

# ``反引号，命令替换

echo $0
script_name=`basename $0`
echo $script_name

script_name=`basename -s .sh  $0`
echo $script_name

# ：冒号。命令执行成功，状态码为0 ，如果失败，状态码为1
echo $?   #返回上一条执行命令的状态码

while : ->while true
if condition
then :
else
    take-some-action
file

: >test.txt.  #清空文件，但不会改变文件权限

！取反操作符
#反转命令退出状态码
#反转测试操作符的意义

! true #注意空格

#定义退出状态码
exit 88 ->0-255
echo $?  ->88

*星号 
#文件通配符
ls -l *
#正则表达式
1133*  #一个或多个3
#乘法

？问号
#文件名通配符
ls -l t*.sh
#正则表达式
#测试操作符

(())双圆括号
#与let命令相似，允许算术拓展和赋值
a=$(( 5 + 3))
(( a++))

((val0 = val1<98?8:23))
if [ "$val1" -lt 98 ]
then    
    val0=8
else     
    val0=23
fi

${parameter?err_msg} #变量未声明，则打印
${parameter:?err_msg} #变量声明了，但未赋值

$美元
#$变量替换
引用变量的值就叫做变量替换
在以下情况下，变量名没有前缀名$
1、变量被声明或被赋值
val=23
echo val

2、变量被unset
3、变量被export
4、变量代表一种信号

#在引用时，$的变化
1、双引号，弱引用，发生变量替换
2、单引号，强引用，保持字面意思

#$正则表达式中行结束符
"abc$" 匹配行尾abc
"^$" 匹配空行

#${}参数替换
${parameter-default}  #如果没声明或赋值，就替换为默认值
${parameter：-default}

echo ${username-`whoami`}
DEFAULT_NAME=generic.data
filename=${1:-$DEFAULT_NAME}. #如果$1没值，则赋值



#$' ... '引用字符串扩展
#$*,$@ 位置参数
#$? 退出状态码变量
#$$ 进程ID变量

（）圆括号
#命令组
#子 局部
a=123
$ (echo "a=$a";a=321;echo "a=$a")
a=123
a=321

$ echo "a=$a"
a=123

#数组初始化

{}大括号
#扩展
cat {file1,file2,file3} >comblined_file

#代码块
{
echo 
echo
} >"$1.text"

if [ -z "$1" ]
then
   echo "uage :`basename $0` rpm-file"
   exit $E_NO
fi

#路径名 {}\;
find . -name "*.txt" -exec cp {} /tmp \;

>  &>  >&  >>  <  <>
#重定向。 1标准输出。2标准错误输出
>>追加输出
&> 重定向标准输出和标准错误输出
2>&1 标准错误输出重定向到标准输出
1>&2 将输出重定向到标准错误输出

#进程tihuan
#比较操作符

#vim比较两个文件
vim -d a.txt b.txt

[] 中括号
#条件测试
if[ 0 ]
then 
    echo "0 is true"

#扩展测试
file =/etc/passwd
if [[ -e $file]]. #判断文件是否在
then 
    echo "passwd file exits"
#数组元素
Array[1]=slot_1
echo ${Array[1]}

#字符范围
[xyz]
[c-n]

竖线与&
｜ 管道
cat *.list |sort |uniq
||或
#任意一边为true则真
if[ $count1 ] || [ $count2 ]
if[ $count1 -o $count2 ]
if[[ $count1  ||  $count2 ]]

ps aux
for i in 1 2 3 4 5 6
do
   echo -n $1
done & #后台执行这个循环

#两边为true则真
if[ $count1 ] && [ $count2 ]
if[ $count1 -a $count2 ]
if[[ $count1  &&  $count2 ]]