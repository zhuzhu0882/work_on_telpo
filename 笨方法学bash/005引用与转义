#!/bin/bash

#引用变量
‘ ’ 强引用，保持字面意思
“” 弱引用，发生变量替换  
#转义
grep '[Ff]irst' *.txt

#字符转义
\ 转义符
\$ \'   \"
\n 新的一行
\r 回车
\t 水平制表

echo -e "\v\v\v\v"  #打印4个水平制表符

#ASCII字符
quote=$'\042'

#管道
true | false
1

#管道的退出状态看最后

#条件判断
#条件测试结构
if/then

if   fi
if  else  fi
if  elif  else  fi
#if/then结构判断依据是退出状态码是否为0，通常是最后命令的退出状态
if [ -z “$1” ]. #左边的[是一个命令，]是参数
if [[ $condition1 || $condition2 ]]

if test condition-true  -> if [ condition-true ]

#命令test支持的类型
1、数值比较
2、字符串比较
3、文件比较

date >test1.txt
date >test2.txt
if cmp test1.txt est2.txt &> /dev/null. #抑制输出

#文件测试操作符
-e 文件存在
-f 表示是一个普通文件
-s 文件大小不为零
-d 表示这是一个目录
-b 表示这个是一个块设备
-c 字符设备
-p  这个文件是个管道

f1 -nt f2    文件1比文件2新
f1 -ot f2.   文件1比文件2旧
fi -ed f2.    文件1和文件2是相同文件的硬链接

#整数比较操作符
#在中括号中使用
-eq. 等于
-ne.  不等于
-gt. 大于
-ge. 大于等于
-lt.  小于
-le.  小于等于

#在双圆括号中使用
<
<=
>
>=


#字符串比较操作符
=等于
==等于。->=
!=不等于
<
>
-z长度为零
-n 长度不为零
str非空

#字符串加双引号

判断是否传递参数
if [ $# -eq 0 ]

#参数替换
$(filename##*.)
文件名(testes.txt.gz) 是否为gz结尾

#匹配最短
##匹配最长

#组合比较
通过布尔操作符来组合比较
-a.  逻辑与
[exp1 & exp2]
-o.  逻辑或

#通过比较操作符来组合比较
&&逻辑与
[[ exp1 && exp2 ]]
||逻辑或




