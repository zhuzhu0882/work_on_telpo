软件工程
架构设计：软件架构为软件系统提供了一个结构、行为和属性的高级抽象

软件架构研究的主要内容：软件架构描述、软件架构风格、软件架构评估、软件架构形式化。解决好软件的复用、质量和维护问题，是研究软件架构的根本目的。

软件架构风格：
数据流风格：批处理系列和管道过滤器
调用/返回风格：包括主程序/子程序、数据抽象和面对对象
独立构件风格：进程通信和事件管理
虚拟机风格：解释器和基于规则
仓库风格：数据库系统、黑板系统何超文本风格

软件架构评估：可以只针对一个架构、也可以针对一组架构，更多关注系统质量属性
三类评估方式：基于调查问卷、基于场景的方式和基于度量的方式

需求分析：
用户满意度
-常规需求
-期望需求
-意外需求

需求过程
｜需求获取：确定和理解不同项目干系人的需求和约束过程
｜需求分析：对已获取到的需求进行提炼、分析和审查，以确保所有项目干系人都明白其含义，需求分析的关键在于对问题域的研究与理解。好的需求具有无二义性、完整性、一致性、可测试性、确定性、可跟踪性、正确性、必要性，把杂乱无章的用户要求和期望转化为用户需求
｜需求认证与确认：

结构化分析：建立的模型的核心是数据字典

三个层次模型：数据模型、功能模型和行为模型

实体关系图（）ER图表示数据模型
数据流图来表示功能模型
用状态转换图表示行为模型

面对对象分析：对问题分析和理解，正确认识其中的事物及他们之间的关系，找出描述问题域和系统功能所需的类和对象
OOA模型包括用例模型和分析模型
用例模型是一种描述系统需求的方法，使用用例的方法来描述系统需求的过程
分析模型描述系统的基本逻辑结构，展示对象和类如何组成系统，实现系统行为
思想：抽象、封装、可扩展性
在OOD中，数据结构和数据结构上定义的操作算法封装在一个对象中
OOD任务：对类和对象进行设计
对于OOD而言，提高软件的可复用性是一个至关重要的问题
｜单职原则：高内聚原则
｜开闭原则：对拓展开放，对修改封闭
｜李氏替换原则：子类可以替换父类
｜依赖倒置原则：要依赖于抽象，而不是具体实现，要针对接口编程，而不是实现编程
｜接口隔离原则：使用多个专门的接口比使用单一的总接口要好
｜组合重用原则：尽量使用组合
｜分组事物迪米特原则：一个对象应对其他对象有尽可能少的了解

OOA四个阶段：识别参与者、合并需求获得用例、细化用例描述、调用用例模型

需求规格说明书编制
｜软件需求规格说明书是需求开发活动的产物

UML中的事物
｜结构事物：静态
｜行为事物
｜分组事物
｜注释事物：解释

UML中的关系
｜依赖、关联、泛化、共享、组合、实现

结构化设计
｜结构化设计是一种面向数据流的方法，它以SRS和SA阶段所产生的DFD和数据字典等文档为基础，是一个自顶向下、逐步求精和模块化过程

在SD中，需要遵循一个基本原则：高内聚、低耦合

内聚表示模块内部做好单一的一个事情
耦合表示模块之间的联系程度







